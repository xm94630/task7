/* 作者：xm94630
 * 创建实例
 * angular.module第一个参数是模块“引用名”，模块间可以通过它引入依赖
 * 第11行代码中括号中就是通过“引用名”对模块的依赖引用，模块也可以理解为类似插件、服务的概念
 * “ui.bootstrap”模块定义是在script标签中引入的
 */
var	appServices    = angular.module('xmApp.services',[]),
    appDirectives  = angular.module('xmApp.directives',[]),
    appControllers = angular.module('xmApp.controllers',[]),
    appFilters     = angular.module('xmApp.filters',[]),
    xmApp          = angular.module('XM',['ui.router','ui.bootstrap','xmApp.services','xmApp.directives','xmApp.controllers','xmApp.filters']);
 
xmApp
	//全局变量注入
	.constant('HERO',{
		HP:1000,
		MP:2000
	})
    .run(["$rootScope", "$state", "$stateParams", function($rootScope, $state, $stateParams) {
    	//绑到根作用域，方便获得当前状态
        $rootScope.$state = $state;
        $rootScope.$stateParams = $stateParams;
    }]);
xmApp
    .config(["$stateProvider", "$urlRouterProvider", function($stateProvider, $urlRouterProvider) {

        $stateProvider
            .state('home', {
                url: '/home',
                views: {
                    'xmContent': {
                        templateUrl: './html/module/home.html',
                        controller: 'homeCtrl'
                    }
                }
            });

        $urlRouterProvider
            .otherwise('/home');

    }]);
//自定义服务
appServices.factory('XmService', ["$rootScope", function ($rootScope) {
    return {
        splat:function(fun){
        	return function(array){
        		return fun.apply(null,array);
        	}
        }
    };
}]);
appDirectives.directive('chosenDirective', ["$timeout", function($timeout) {
    return {
        scope: {
            'setSelected': '=',
            'changeFunction': '=',
            'chosenData': '='
        },
        //这个是获取模块，在link的第四个参数中使用，用来质量之间的通信，这个是指的就是那个指令的控制器内容
        require: "?ngModel",
        restrict: 'A', // E = Element, A = Attribute, C = Class, M = Comment
        templateUrl: './html/directive/chosen.html',
        transclude: true,
        compile: function(tEle, tAttr, transcludeFn) {

            //
            return function(scope, element, attrs, ngModel) {
                var _defaultResult = [];
                scope.isOpen = false;
                //是否显示搜索
                scope.chosenSearch = !attrs['isHaveSearch'];
                //是否单选
                scope.isSingle = !attrs['isMulit'] || false;

                var selectedDom = [],
                    selectedClass = 'highlighted';

                scope.mouseover = function(e) {
                    if (optionStatus(angular.element(e.target))) return;
                    angular.element(e.target).addClass('highlighted');
                }
                scope.mouseleave = function(e) {
                    if (optionStatus(angular.element(e.target))) return;
                    angular.element(e.target).removeClass('highlighted');
                }
                scope.clickoption = function(e) {
                    if (optionStatus(angular.element(e.target))) return;
                    //重置
                    scope.searchVal = '';
                    scope.results = _defaultResult;

                    setSelected(angular.element(e.target));
                    scope.isOpen = false;
                }

                scope.openDrop = function() {
                    scope.isOpen = !scope.isOpen;
                }

                scope.searchOption = function(val) {
                    var _list = [];
                    var _reg = new RegExp(val, 'g');

                    for (var i = 0; i < _defaultResult.length; i++) {
                        if (_defaultResult[i].label.search(_reg) != -1) {
                            _list.push(_defaultResult[i]);
                        }
                    }
                    scope.results = _list;
                }


                scope.removeSelected = function(index, e) {
                    e.stopPropagation();
                    selectedDom[index].removeClass('result-selected');
                    selectedDom.splice(index, 1);
                    scope.currentOption.splice(index, 1);
                    changeFunctions();
                }

                function optionStatus(dom) {
                    var _result = false;
                    if (dom.hasClass('group-result') || dom.hasClass('result-selected')) {
                        _result = true;
                    }
                    return _result;
                }

                function setSelected(dom) {
                    var _selected,
                        _dom,
                        _val = dom.text();
                    dom.removeClass('highlighted');
                    if (attrs['isMulit']) {
                        _selected = scope.currentOption;
                        _dom = selectedDom;
                        selectedDom.push(dom);
                        _selected.push(_val);
                    } else {
                        _selected = _val;
                        if (selectedDom.length != 0) {
                            selectedDom[0].removeClass('highlighted');
                        }
                        selectedDom = [dom];
                    }
                    scope.currentOption = _selected;

                    changeFunctions();
                }

                function getSelectedValue() {
                    var _val = [];
                    for (var i = 0; i < selectedDom.length; i++) {
                        _val.push(selectedDom[i].attr('data-value'));
                    }
                    return _val;
                }

                function changeFunctions() {
                    var _cur = scope.currentOption;
                    if (angular.isFunction(scope.changeFunction)) {
                        if (!!ngModel) {
                            ngModel.$setViewValue(getSelectedValue());
                        }
                        scope.changeFunction(_cur, getSelectedValue());
                    }
                    scope.$emit('chosenChange', scope.currentOption, getSelectedValue());
                }

                function createDom() {
                    transcludeFn(scope, function(clone) {
                        var _results = [];
                        if (clone.length == 0) {
                            return;
                        }
                        for (var i = 0; i < clone.length; i++) {
                            if (clone[i].nodeType == 1) {
                                if (clone[i].tagName == 'OPTGROUP') {
                                    _results.push({
                                        label: clone[i].label,
                                        group: 'title'
                                    });
                                    if (clone[i].children.length > 0) {
                                        for (var j = clone[i].children.length - 1; j >= 0; j--) {
                                            _results.push({
                                                label: clone[i].children[j].label,
                                                group: 'option',
                                                value: clone[i].children[j].value
                                            });

                                        }
                                    }
                                } else {
                                    _results.push({
                                        label: clone[i].label,
                                        group: 'none',
                                        value: clone[i].value
                                    })
                                }
                            }
                        }
                        _defaultResult = _results;
                        scope.results = _results;
                        scope.currentOption = clone[1].label;
                    });
                }

                function setChosenSelected() {
                    if (scope.setSelected != undefined && scope.setSelected.length != 0) {
                        var _option = element[0].querySelectorAll('.chosen-results li');
                        var index = 0;
                        setFor:
                            for (var j = 0; j < scope.setSelected.length; j++) {
                                for (var i = 0; i < _option.length; i++) {
                                    if (angular.element(_option[i]).attr('data-value') == scope.setSelected[j]) {
                                        setSelected(angular.element(_option[i]));
                                        index++;
                                        break setFor;
                                    }
                                }
                            }
                        if (index <= 0) {
                            setSelected(angular.element(_option[0]));
                        }
                    }
                }

                function addWatch() {

                    var _body = angular.element(document.getElementsByTagName('body'));

                    scope.$watch('isOpen', function() {
                        for (var i = 0; i < selectedDom.length; i++) {
                            selectedDom[i].addClass(selectedClass);
                        }
                        if (scope.isOpen == true) {
                            $timeout(function() {
                                _body.bind('click', function(e) {
                                    var _parent = angular.element(e.target);
                                    for (var i = 0; i < 5; i++) {
                                        if (_parent.parent().length == 0) {
                                            break
                                        }
                                        if (element[0] == _parent.parent()[0]) {
                                            return false
                                        } else {
                                            _parent = _parent.parent();
                                        }
                                    }
                                    scope.$apply(function() {
                                        scope.isOpen = false;
                                    });
                                });
                            }, 10);
                        } else {
                            _body.unbind('click');
                        }
                    })

                    if (attrs['isMulit']) {
                        scope.currentOption = [];
                        selectedDom = [];
                        selectedClass = 'result-selected';
                        // scope.multiValue = '请选择一些选项';
                        scope.$watch('currentOption.length', function() {
                            if (scope.currentOption.length != 0) {
                                scope.multiValue = '';
                                scope.multiwidth = '25px';
                            } else {
                                scope.multiValue = '请选择一些选项';
                                scope.multiwidth = 'auto';
                            }
                        })
                    }

                    scope.$watch('setSelected', function() {
                        $timeout(setChosenSelected, 20);
                    })

                }

                function init() {
                    // console.log(scope.chosenData)
                    if (scope.chosenData != undefined) {
                        _defaultResult = scope.chosenData;
                        scope.results = scope.chosenData;
                        scope.currentOption = scope.chosenData[0].label;
                        scope.$watch('chosenData', function() {
                            _defaultResult = scope.chosenData;
                            scope.results = scope.chosenData;
                            scope.currentOption = scope.chosenData[0].label;
                        })
                    } else {
                        createDom();
                    }
                    addWatch();
                }

                init();
            };
        },
        replace: true
    };
}])

appDirectives.directive('chosenMiniDirective', ["$rootScope", "$timeout", function($rootScope,$timeout) {
    return {
    	restrict: 'AE',
    	replace: 'true',
    	templateUrl: './html/directive/chosenMini.html',
        scope: {
    		'chosenData'    : '=',
    	    'setSelected'   : '=',
            'changeFunction': '=',
    	    'deleteMultiLabel': '=',
            'isHaveSearch': '='
        },

        //这个是获取模块，在link的第四个参数中使用，用来质量之间的通信，这个是指的就是那个指令的控制器内容
        //？是什么意思
        require: "?ngModel",

        //这个参数开启之后，才能对“指令标签”中的子集DOM进行引用和处理，它体现在compile函数中第3个参数
        transclude: true,

        //我认为compile和link的区别在于，compile是link的前置步骤，return之后得到的就是link的函数
        //这里的第三个才是就是上面提到的“指令标签”中的子集DOM的处理函数
        //当transclude为false的时候， 就不能是用transcludeFn， 否者的话就会出错
        compile: function(tEle, tAttr, transcludeFn) {

            return function(scope, element, attrs, ngModel) {

                //这部分是对“指令标签”中的子集DOM的引用，和处理
                /*transcludeFn(scope, function(clone){
                    return;
                });*/

                
                /******************************
                 * 定义
                 ******************************/

                //用来备份数据
                var cloneData = angular.copy(scope.chosenData);

                //获取双向绑定的数据
                /*var data        = scope.chosenData;
                var selectedArr = scope.setSelected;
                var changeFun   = scope.changeFunction;*/

                //这个不需在这里控制
                //scope.isHaveSearch = false;
                

                //自定义函数
                var isArray = Array.isArray || function(obj){
                    return Object.prototype.toString.call(obj) == '[object Array]';
                }
                scope.isArray = isArray;

                function isString(obj){
                    return Object.prototype.toString.call(obj) == '[object String]';
                }

                /*function removeFromArray (v,arr) {
                    var index = arr.indexOf(v); 
                    if (index > -1) { arr.splice(index, 1); } 
                };*/

                //多选的标签
                scope.mutiLabels=[];

                //l(scope.mutiLabels)
                for(var i=0;i<scope.setSelected.length;i++){
                    scope.mutiLabels.push(getObjByValue(scope.chosenData,scope.setSelected[i]));
                }
                //l(scope.mutiLabels)

                scope.mutiLabelClick = function(e){
                    var value = angular.element(e.target).parent().attr('value');
                    removeAttributeByValue(value);

                    var label;
                    //移除
                    for(var i=0;i<scope.mutiLabels.length;i++){
                        if(scope.mutiLabels[i].value==value){
                            label = scope.mutiLabels[i].label;
                            scope.mutiLabels.splice(i, 1);
                        }
                    }
                    //移除
                    for(var i=0;i<scope.setSelected.length;i++){
                        if(scope.setSelected[i]==value){
                            scope.setSelected.splice(i, 1);
                        }
                    }

                    scope.deleteMultiLabel(label,value,scope.setSelected);

                    e.stopPropagation();
                }


                //字符串去前
                function trim(text){
                    if(!isString(text)){return text;}
                    return text.replace(/(^\s*)|(\s*$)/g,'');
                }
                
                function contains(arr, obj) {
                  var i = arr.length;
                  while (i--) {
                    if (arr[i] == obj) {
                      return true;
                    }
                  }
                  return false;
                }
                
                //通过value值获取对象
                function getObjByValue(data,v){
                    for(var i=0;i<data.length;i++){
                        if(isArray(data[i])){
                            for(var j=0;j<data[i].length;j++){
                               if(data[i][j].value == v){
                                   return data[i][j];
                               }
                            }
                        }else{
                            if(data[i].value == v){
                                return data[i];
                            }
                        }
                    }
                }



                /******************************
                 * 初始配置
                 ******************************/
                //获取插件的配置参数
                scope.chosenSearch = !attrs['isHaveSearch'];
                scope.isMulit = (attrs['isMulit']&&attrs['isMulit']!='false') || false;

   

                 //默认选中
                 if(scope.isMulit){
                    
                    //给数据中添加上active
                    for(var i=0;i<scope.setSelected.length;i++){
                        v = scope.setSelected[i];
                        addAttributeByValue(v);
                    }
                    
                 }else{
                    var defaultValue = scope.setSelected[0];
                    clearActiveAttribute();
                    var defaultLabel= addAttributeByValue(defaultValue);
                 }

                 

                 scope.chosenData = cloneData;
                 scope.myChosen = defaultLabel;

  
                //多选和单选的框框UI不一样
                if(scope.isMulit){
                    scope.showConBox = false;
                    scope.showConBoxMulti = true;
                }else{
                    scope.showConBox = true;
                    scope.showConBoxMulti = false;
                }
                
                //默认下拉为隐藏
                scope.showList = false;
                
                //默认搜索内容
                scope.searchCon = '';
                

                scope.showDownBox = function(e){
                    //var ele = angular.element(e.target);
                    scope.showList = !scope.showList;
                    //这句话不写很关键！！其实我是需要他冒泡到body的
                    //e.stopPropagation();
                }

                //搜索,根据关键词过滤数据
                scope.inputChange = function(e){

                    var newArr = [];
                    var list;
                    var label;
                    var cloneData2;

                    //获取搜索值
                    var v = trim(scope.searchCon);

                    //对于空字符串，使用“克隆数据”
                    if(v==''){
                        scope.chosenData = cloneData;
                        return;
                    }

                    //对于非空的搜索，再次对“克隆数据”进行克隆
                    cloneData2 = angular.copy(cloneData);
                    for(var i=0;i<cloneData2.length;i++){

                        list = cloneData[i];

                        //该项不为数组的时候
                        if(!isArray(list)){

                            if(list.label.indexOf(v)!=-1){
                                newArr.push(list);
                            }

                        //该项为数组的时候
                        }else{
                            
                            //空数组则不处理
                            if(list.length==0){
                                break;
                            }

                            //构建新的子数据，添加第一个作为标题元素
                            var sonArr = [list[0]];

                            for(var j=0;j<list.length;j++){

                                //如果标题中就有关键词，把该子类全部添加上，跳出循环
                                if(list[0].label.indexOf(v)!=-1){
                                    newArr.push(list);
                                    break;

                                //若不是标题，那么对子类循环判断，只有满足条件的添加
                                }else{
                                    if(list[j].label.indexOf(v)!=-1){
                                        sonArr.push(list[j]);
                                    }
                                }

                            }

                            //子级别至少有1个符合搜索的条件（因为标题就占据一行）
                            if(sonArr.length>1){
                                newArr.push(sonArr);
                            }

                        }

                    }
                    scope.chosenData = newArr;

                };


                //通过value值来为指定对象添加属性active为true
                function addAttributeByValue(v){
                    for(var i=0;i<cloneData.length;i++){
                        if(isArray(cloneData[i])){
                            for(var j=0;j<cloneData[i].length;j++){
                                if(cloneData[i][j].value == v){
                                    cloneData[i][j].active = true;
                                    return cloneData[i][j].label;
                                }
                            }
                        }else{
                            if(cloneData[i].value == v){
                                cloneData[i].active = true;
                                return cloneData[i].label;
                            }
                        }
                    }
                }
                //通过value值来为指定对象添加属性active为true
                function removeAttributeByValue(v){
                    for(var i=0;i<cloneData.length;i++){
                        if(isArray(cloneData[i])){
                            for(var j=0;j<cloneData[i].length;j++){
                                if(cloneData[i][j].value == v){
                                    cloneData[i][j].active = false;
                                    return cloneData[i][j].label;
                                }
                            }
                        }else{
                            if(cloneData[i].value == v){
                                cloneData[i].active = false;
                                return cloneData[i].label;
                            }
                        }
                    }
                }

                function clearActiveAttribute(){
                    for(var i=0;i<cloneData.length;i++){
                        if(isArray(cloneData[i])){
                            for(var j=0;j<cloneData[i].length;j++){
                                cloneData[i][j].active = false;
                            }
                        }else{
                            cloneData[i].active = false;
                        }
                    }
                }

                //事件
                scope.listClick = function(e){
                    var value = '';
                    var label = '';
                    var ele = angular.element(e.target);


                    if(ele[0].tagName=='LI'){
                         if(ele.hasClass('active')){
                            scope.showList = false;
                            return;
                         }  
                        if(ele.hasClass('forbid')){return;}
                        value = trim(ele.attr('value'));
                        label = trim(ele.attr('label'));
                    }else{
                         if(ele.parent().hasClass('active')){
                            scope.showList = false;
                            return;
                         }
                        if(ele.parent().hasClass('forbid')){return;}
                        value = trim(ele.parent().attr('value'));
                        label = trim(ele.parent().attr('label'));
                    }

                    if(scope.isMulit){
                           
                    }else{
                       clearActiveAttribute();
                    }

                    addAttributeByValue(value);

                    scope.myChosen = label;
                    scope.showList = false;
                    scope.chosenData = cloneData;
                    scope.searchCon = '';


                    if(scope.isMulit){
                        //多选的
                        if(ele.hasClass('active')){
                        }else{  
                            scope.mutiLabels.push(getObjByValue(scope.chosenData,value));
                            scope.setSelected.push(value)
                        }
                    }else{
                        //选中
                        scope.setSelected = [value];
                    }


                    //回调
                    scope.changeFunction(label,value,scope.setSelected);

                    e.stopPropagation();
                }


                angular.element(document.querySelector('.downBox')).bind('click',function(e){
                    e.stopPropagation();
                })

                //这种写法是不好的，改成下面的方法就很赞
                /*angular.element(document.getElementsByTagName('body')).bind('click',function(e){
                    scope.$apply(function(){
                        scope.showList = false;
                    });                    
                })*/

                //这个写法借鉴chosen的
                //这样子写的目的就是：我在有多个实例的时候，点击这个的时候，那个会隐藏！
                var _body = angular.element(document.getElementsByTagName('body'));
                scope.$watch('showList', function() {
                    if (scope.showList == true) {
                        $timeout(function() {
                            _body.bind('click', function(e) {
                                var _parent = angular.element(e.target);
                                for (var i = 0; i < 5; i++) {
                                    if (_parent.parent().length == 0) {
                                        break
                                    }
                                    if (element[0] == _parent.parent()[0]) {
                                        return false
                                    } else {
                                        _parent = _parent.parent();
                                    }
                                }
                                scope.$apply(function() {
                                    scope.showList = false;
                                });
                            });
                        }, 10);
                    } else {
                        _body.unbind('click');
                    }
                });








            };
        },
        replace: true
    };
}])

appDirectives.directive('datePigDirective', ["$rootScope", "$timeout", function($rootScope,$timeout) {
	return {
	    restrict: 'AE',
	    replace: 'true',
	    templateUrl: './html/directive/datePig.html',
	    scope: {
	        dateInfo: "="
	    },
	    controller:["$scope", function($scope){
	    }],
	    link:function(scope,element,attrs){

	    	var a,b,c,d,span;
	    	var time1,time2,time3,time4;
	    	var parameter = scope.dateInfo;
	    	var a = parameter.sTime[0];
	    	var b = parameter.sTime[1];
	    	var c = parameter.eTime[0];
	    	var d = parameter.eTime[1];
	    	var span = parameter.span;

	    	if(span<=0) error("时间间隔至少为1个月");

	    	var defaultYearList = {
	    		group: "title",
	    		label:"年份",
	    		value: "-1"
	    	};
	    	var defaultMonthList = {
	    		group: "title",
	    		label:"月份",
	    		value: "-1"
	    	};

	    	var isNumber = function(obj){
	    		return Object.prototype.toString.call(obj) == '[object Number]';
	    	}

	    	var isArray = Array.isArray || function(obj){
	    		return Object.prototype.toString.call(obj) == '[object Array]';
	    	}

	    	function error(info){
	    		throw new Error(info);
	    	}

	    	function warn(info){
	    		console.log('[warn]'+info);
	    	}

	    	//在年月时间基础上，加上n月，返回新的年月
	    	//addMonth([2001,9],5) => [2002,2]
	    	function addMonth(arr,n){

	    		var year = arr[0];
	    		var month = arr[1];
	    		var addY;
	    		if(n>=0){
	    			if(n>12){
	    				addY = n%12;
	    				year += addY;
	    			}else{
	    				month += n;
	    			}
	    			if(month>12){
	    				month -= 12;
	    				year  += 1;
	    			}
	    		}else{
	    			if(n<-12){
	    				addY  = n%12;
	    				year += addY;
	    			}else{
	    				month += n;
	    			}
	    			if(month<=0){
	    				month  = month+12;
	    				year  -= 1;
	    			}
	    		}		
	    		return [year,month]	

	    	}

	    	//获取时间间隔,以月份为返回单位
	    	//getInterval([2001,1],[2002,12]) =>24
	    	function getInterval(time1,time2){
	    		var a = time1[0],  
	    			b = time1[1],
	    			c = time2[0],
	    			d = time2[1];
	    		if (greaterThan(time1,time2)) return;
	    		if(c>=a && d>=b){
	    			//时间间隔为一年以上
	    			return (c-a)*12+(d-b)+1; 
	    		}else if(c>a && d<b){
	    			//时间间隔为一年以及一年以内
	    			return ((c-1)-a)*12+((12+d)-b)+1;
	    		}

	    	}

	    	/* 
	    	 * 时间大小比较
	    	 * 支持单独的年、月、组合年月大小的比较，用法：
	    	 * greaterThan([1998,2],[1998,1]) 返回true
	    	 * greaterThan(1998,1997) 返回true
	    	 */
	    	function greaterThan(time1,time2){
	    		if(isNumber(time1) && isNumber(time2)){
	    			if(time1>time2) return true; 
	    		}else if(isArray(time1) && isArray(time2)){
	    			var a = time1[0],  
	    				b = time1[1],
	    				c = time2[0],
	    				d = time2[1];
	    			if(a>c||(a==c)&&(b>d)){
	    				return true;
	    			}
	    		}else{
	    			error('greaterThan:参数类型有误！');
	    		}
	    		return false;
	    	}
	    	
            //获取年份的范围
            //getRangeByYear([2002,1],[2005,12]) =>[2002, 2003, 2004, 2005]
			function getRangeByYear(time1,time2){
				var i,arr = [],
					a = time1[0],  
					b = time1[1],
					c = time2[0],
					d = time2[1];
				if (greaterThan(time1,time2)) return;
				for(i=a;i<=c;i++){
					arr.push(i);
				}
				return arr;
			}

            //获取月份的范围
            //getRangeByMonth([2016,9],[2017,1]) =>[1, 9, 10, 11, 12]
			function getRangeByMonth(time1,time2){
				var i,arr = [],
					a = time1[0],  
					b = time1[1],
					c = time2[0],
					d = time2[1];
				if (greaterThan(time1,time2)) return;
				//超过12月，所有月份可选
				if(getInterval(time1,time2)>=12){
					for(i=1;i<=12;i++){
						arr.push(i);
					}
					return arr;
				//不到12月
				}else{
				 	//同年
					if(a==c){
						for(i=b;i<=d;i++){
							arr.push(i);
						}
						return arr;
					//其他
					}else{
						for(i=b;i<=12;i++){
							arr.push(i);
						}
						for(i=1;i<=d;i++){
							arr.push(i);
						}
						arr.sort(function(x,y){
							return x>y;
						})
						return arr;
					}
				}
				return;
			}

			//获取两个数之间以1递增的序列，以数组形式返回
 			//getRange(3,6); -> 返回[3,4,5,6]
 			function getRange(a,b){
 				var i,
 					arr=[];
 				if(a>b) return error('getRange:第一个参数必须小于第二个参数');
 				for(i=a;i<=b;i++){
 					arr.push(i);
 				}
 				return arr;
 			}

 			//是否同年
 			function isSameYear(time1,time2){
 				if(getRangeByYear(time1,time2).length==1){
 					return true;
 				}
 			}

 			//是否跨年
 			function isTransYear(time1,time2){
 				if(getRangeByYear(time1,time2).length==2){
 					return true;
 				}
 			}

 			//是否多年
 			function isSeveralYear(time1,time2){
 				if(getRangeByYear(time1,time2).length>2){
 					return true;
 				}
 			}

 			//高阶函数
 			//getValid([2010,6],[2013,2])('month',11)   => [2010, 2011, 2012]
 			//getValid([2010,6],[2013,2])('year' ,2013) => [1,2]
 			function getValid(time1,time2){
 				return function(type,x){
 					var i,
 					    arr  = [],
 					    obj  = {},
 					    obj2 = {},
 					    firstArr  = [],
 					    secondArr = [],
 						a    = time1[0],  
 						b    = time1[1],
 						c    = time2[0],
 						d    = time2[1];

 					if(type=='year'){

 						if(isSameYear(time1,time2)){
 							obj[a] = getRange(b,d);
 						}else if(isTransYear(time1,time2)){
 							obj[a] = getRange(b,12);
 							obj[c] = getRange(1,d);
 						}else if(isSeveralYear(time1,time2)){
 							for(i=a;i<=c;i++){
 								if(i==a){
									obj[a] = getRange(b,12);
 								}else if(i==c){
 									obj[c] = getRange(1,d);
 								}else{
 									obj[i] = getRange(1,12);
 								}
 							}
 						}

 					}else if(type=='month'){

 						if(isSameYear(time1,time2)){
 							arr.push(a);
 						}else{

 							//递归调用
 							firstArr  = getValid(time1,time2)('year' ,a);
 							secondArr = getValid(time1,time2)('year' ,c);
 							
 							//只需对首尾两个年份做判断
 							if(firstArr.indexOf(x) !=-1){
 								arr.push(a);
 							}
 							if(secondArr.indexOf(x)!=-1){
 								arr.push(c);
 							}
 							
 							//剩余年份都是有1-12月份
 							if(c-a>=2){
								for(i=a+1;i<c;i++){
									arr.push(i);
								}
 							}
 							arr.sort(function(x,y){
 								return x>y;
 							});
 						}

 						return arr;
 						
 					}

 					return obj[x] || warn('参数不在提供的时间范围中');
 				}

 			}

 			//组装chose所需的数据格式
 			function packageData(defaultObj,rangeArr){
 				var arr = [];
 				arr.push(defaultObj);
 				rangeArr.forEach(function(item){
 					arr.push({
 						group: "none",
	 				    label: item,
	 				    value: item
 					});
 				});
 				return arr;
 			}

	    	//组装chosen所需数据
 			yearObj  = packageData(defaultYearList, getRangeByYear ([a,b],[c,d]));
 			monthObj = packageData(defaultMonthList,getRangeByMonth([a,b],[c,d]));

 			//实例化指令
 			scope.chosendata = {
 				item1:{
 					data:yearObj,
 					selected:null,
 					change:function(label,value){
 						
 						//年份改变，重置月份
 						time1 = parseInt(value[0]);
 						monthArr = getValid([a,b],[c,d])('year',time1);
 						scope.chosendata.item2.data     = packageData(defaultMonthList,monthArr);
						scope.chosendata.item2.selected = [time2];

						//如果此时两个年份已经确定，则比较两者大小，有误则重置另一个年份
						if(time1>0 && time3>0){
							if(greaterThan(time1,time3)){
								time3 = time1;
								scope.chosendata.item3.selected = [time3];
								return;
							}
						}

						

 					}
 				},
 				item2:{
 					data:monthObj,
 					selected:null,
 					change:function(label,value){

 						time2 = parseInt(value[0]);

 						//如果此时四个下拉已经确定
 						if(time1>0 && time2>0 && time3>0 && time4>0){

 							//则比较时间大小，有误则重置另一个时间
 							if(greaterThan([time1,time2],[time3,time4])){
 								time3 = time1;
 								time4 = time2;
 								scope.chosendata.item3.selected = [time3];
 								scope.chosendata.item4.selected = [time4];
 								return;
 							}

 							//如果有时间间隔限制
 							if(span){
 								if(getInterval([time1,time2],[time3,time4])>span){
 									warn('时间间隔超过设定，系统自动调整');
 									var arr = addMonth([time1,time2],(span-1));
 									//及时调整时间
 									time3 = arr[0]; 
 									time4 = arr[1]; 
 									scope.chosendata.item3.selected = [time3];
 									scope.chosendata.item4.selected = [time4];
 								}
 							}
 						}

 					}
 				},
 				item3:{
 					data:yearObj,
 					selected:null,
 					change:function(label,value,x,y){

 						//年份改变，重置月份
 						time3 = parseInt(value[0]);
 						monthArr = getValid([a,b],[c,d])('year',time3);
 						scope.chosendata.item4.data     = packageData(defaultMonthList,monthArr);
						scope.chosendata.item4.selected = [time4];

						//如果此时两个年份已经确定，则比较两者大小，有误则重置另一个年份
						if(time1>0 && time3>0){
							if(greaterThan(time1,time3)){
								time1 = time3;
								scope.chosendata.item1.selected = [time1];
								return;
							}
						}

 					}
 				},
 				item4:{
 					data:monthObj,
 					selected:document.querySelector('#chose4 li[data-value="10"]'),
 					change:function(label,value){

 						time4 = parseInt(value[0]);

 						//如果此时四个下拉已经确定
 						if(time1>0 && time2>0 && time3>0 && time4>0){

 							//则比较时间大小，有误则重置另一个时间
 							if(greaterThan([time1,time2],[time3,time4])){
 								time1 = time3;
 								time2 = time4;
 								scope.chosendata.item1.selected = [time1];
 								scope.chosendata.item2.selected = [time2];
 								return;
 							}

 							//如果有时间间隔限制
 							if(span){
 								if(getInterval([time1,time2],[time3,time4])>span){
 									warn('时间间隔超过设定，系统自动调整');
 									var arr = addMonth([time3,time4],-(span-1));
 									//及时调整时间
 									time1 = arr[0]; 
 									time2 = arr[1]; 
 									scope.chosendata.item1.selected = [time1];
 									scope.chosendata.item2.selected = [time2];
 								}
 							}

 						}

 					}
 				}
 			};


 			



	    }
	};
}]);


/**
 * Created by Administrator on 2016/1/27.
 */
appControllers.controller("homeCtrl",["$scope", "XmService", function($scope,XmService){

	//这里使用了服务
	var value = XmService.splat(function(x,y){
		return x+y;
	})([1400,8127]);

	//这部分数据是传递给指令用的，用来作为指令的参数
	$scope.pigData={
	    sTime : [2016,4],
	    eTime : [2018,8],
	    span  : 12
	};

	$scope.xxx ='-';
	$scope.xxx2 ='-';
	$scope.xxx3 ='-';

	//这部分数据是传递给指令用的，用来作为指令的参数
	$scope.chosendata2 = {
		data:[{
			label:"请选择",
			disabled:true
		},{
			label:"孙悟空",
			value: "0"
		},{
			label:"太阳神",
			value: "1"
		},[
			{
				label:"妖怪"
			},{
				label:"孙猴子",
				value: "2"
			},{
				label:"妖怪王",
				value: "3"
			},{
				label:"神仙杀手",
				value: "4"
			},{
				label:"红孩儿",
				value: "5",
				disabled:true
			}
		]
		,[
			{
				label:"神仙"
			},{
				label:"太上老君",
				value: "6",
				disabled:true
			},{
				label:"太白金星",
				value: "7"
			},{
				label:"孙大圣",
				value: "8"
			}
		]],
		selected:['3'],
		haveSearch:true,
		change:function(label,value,selected){
			$scope.xxx  = selected;
			$scope.xxx2 = label;
			$scope.xxx3 = value;
		},
		deleteMultiLabel:function(label,value,selected){
			$scope.xxx  = selected;
			$scope.xxx2 = label;
			$scope.xxx3 = value;
		}
	}



	$scope.chosendata3 = {
		data:[{
				label:"小明",
				value:"0"
			},[
			{
				label:"同学"
			},{
				label:"张三",
				value: "1"
			}
		],[
			{
				label:"邻居"
			},{
				label:"老王的孩子",
				value: "2"
			},{
				label:"老李",
				value: "3"
			},{
				label:"老爷儿",
				value: "4"
			}
		],[
			{
				label:"同事"
			},{
				label:"李小四",
				value: "5"
			},{
				label:"周三",
				value: "6"
			},{
				label:"小王八蛋",
				value: "7"
			}
		]],
		selected:['1','6'],
		haveSearch:true,
		change:function(label,value,selected){
			$scope.xxx  = selected;
			$scope.xxx2 = label;
			$scope.xxx3 = value;
		},
		deleteMultiLabel:function(label,value,selected){
			$scope.xxx  = selected;
			$scope.xxx2 = label;
			$scope.xxx3 = value;
		}
	}



}]);